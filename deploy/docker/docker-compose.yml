version: '3.8'

services:
  # PostgreSQL with pgvector extension
  db:
    image: pgvector/pgvector:pg15
    container_name: rca_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-rca_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-rca_engine}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - rca_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rca_user} -d ${POSTGRES_DB:-rca_engine}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Ollama for local LLM processing
  ollama:
    image: ollama/ollama:latest
    container_name: rca_ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - rca_network
    environment:
      OLLAMA_ORIGINS: "http://localhost:3000,http://localhost:8000"
      OLLAMA_HOST: "0.0.0.0:11434"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434/api/tags || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Port not exposed to host in production - use internal networking
    expose:
      - "11434"

  # Redis for caching and rate limiting (optional)
  redis:
    image: redis:7-alpine
    container_name: rca_redis
    restart: unless-stopped
    profiles:
      - with_redis
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - rca_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # RCA Engine Core Application
  rca_core:
    build:
      context: ../
      dockerfile: deploy/docker/Dockerfile.secure
      args:
        USER_ID: 1000
        GROUP_ID: 1000
    container_name: rca_core
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      ollama:
        condition: service_healthy
    environment:
      # Database
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-rca_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-rca_engine}
      
      # Redis (optional)
      REDIS_ENABLED: ${REDIS_ENABLED:-false}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      JWT_ISSUER: ${JWT_ISSUER:-rca-engine}
      JWT_AUDIENCE: ${JWT_AUDIENCE:-rca-users}
      
      # LLM
      OLLAMA_HOST: http://ollama:11434
      OLLAMA_MODEL: ${OLLAMA_MODEL:-llama2}
      DEFAULT_PROVIDER: ${DEFAULT_PROVIDER:-ollama}
      
      # Application
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      METRICS_ENABLED: ${METRICS_ENABLED:-true}
      METRICS_PORT: 8001
      
      # Worker
      WORKER_POLL_INTERVAL: ${WORKER_POLL_INTERVAL:-5}
      WORKER_MAX_CONCURRENT_JOBS: ${WORKER_MAX_CONCURRENT_JOBS:-5}
      
      # Files
      MAX_FILE_SIZE_MB: ${MAX_FILE_SIZE_MB:-100}
      ENABLE_VIRUS_SCAN: ${ENABLE_VIRUS_SCAN:-false}
      
    volumes:
      - ../uploads:/app/uploads
      - ../reports:/app/reports
      - ../logs:/app/logs
      - ../watch-folder:/app/watch-folder
    networks:
      - rca_network
    ports:
      - "8000:8000"
      - "8001:8001"  # Metrics
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/.cache
    user: "1000:1000"

  # UI Application
  ui:
    build:
      context: ../ui
      dockerfile: Dockerfile.secure
    container_name: rca_ui
    restart: unless-stopped
    depends_on:
      - rca_core
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8000}
      NODE_ENV: ${NODE_ENV:-production}
    networks:
      - rca_network
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    user: "1000:1000"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: rca_prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    networks:
      - rca_network
    ports:
      - "9090:9090"
    depends_on:
      - rca_core

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rca_grafana
    restart: unless-stopped
    profiles:
      - monitoring
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - rca_network
    ports:
      - "3001:3000"
    depends_on:
      - prometheus

  # PostgreSQL metrics exporter
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: rca_postgres_exporter
    restart: unless-stopped
    profiles:
      - monitoring
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-rca_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-rca_engine}?sslmode=disable"
    networks:
      - rca_network
    depends_on:
      - db

  # Redis metrics exporter
  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: rca_redis_exporter
    restart: unless-stopped
    profiles:
      - monitoring
    environment:
      REDIS_ADDR: "redis:6379"
    networks:
      - rca_network
    depends_on:
      - redis

  # Node exporter for system metrics
  node_exporter:
    image: prom/node-exporter:latest
    container_name: rca_node_exporter
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - rca_network
    ports:
      - "9100:9100"

  # Alertmanager for alert routing
  alertmanager:
    image: prom/alertmanager:latest
    container_name: rca_alertmanager
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/config.yml
      - alertmanager_data:/alertmanager
    networks:
      - rca_network
    ports:
      - "9093:9093"
    depends_on:
      - prometheus

  # File watcher for automatic processing
  file_watcher:
    build:
      context: ../
      dockerfile: deploy/docker/Dockerfile.watcher
    container_name: rca_file_watcher
    restart: unless-stopped
    profiles:
      - with_watcher
    environment:
      API_URL: http://rca_core:8000
      WATCH_FOLDER: /app/watch-folder
      POLL_INTERVAL: 10
      FILE_PATTERNS: "*.log,*.txt,*.json"
    volumes:
      - ../watch-folder:/app/watch-folder
      - ../uploads:/app/uploads
    networks:
      - rca_network
    depends_on:
      - rca_core
    user: "1000:1000"

  # Virus scanner (optional)
  clamav:
    image: clamav/clamav:stable
    container_name: rca_clamav
    restart: unless-stopped
    profiles:
      - with_antivirus
    volumes:
      - clamav_data:/var/lib/clamav
    networks:
      - rca_network
    ports:
      - "3310:3310"
    healthcheck:
      test: ["CMD-SHELL", "clamdcheck.sh"]
      interval: 300s
      timeout: 10s
      retries: 3

networks:
  rca_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  ollama_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  clamav_data:
    driver: local