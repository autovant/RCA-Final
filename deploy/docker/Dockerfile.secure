# syntax=docker/dockerfile:1
# RCA Engine - Secure Production Dockerfile
# Multi-stage build with security hardening

ARG PYTHON_VERSION=3.11
ARG USER_ID=1000
ARG GROUP_ID=1000

# Stage 1: Build dependencies
FROM python:${PYTHON_VERSION}-slim-bookworm as builder

# Install build dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    libpq-dev \
    libffi-dev \
    && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements
COPY requirements.txt requirements.prod.txt ./

# Install Python dependencies
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.prod.txt

# Stage 2: Runtime image
FROM python:${PYTHON_VERSION}-slim-bookworm as runtime

# Security: Create non-root user
ARG USER_ID
ARG GROUP_ID
RUN groupadd -g ${GROUP_ID} rca && \
    useradd -r -u ${USER_ID} -g rca -d /app -s /bin/bash -c "RCA Engine User" rca

# Security: Install security updates and runtime dependencies
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    curl \
    libpq5 \
    libffi8 \
    ca-certificates \
    && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=rca:rca . .

# Security: Set proper permissions
RUN chmod +x scripts/*.sh && \
    mkdir -p /app/uploads /app/reports /app/logs /app/watch-folder /app/.cache && \
    chown -R rca:rca /app && \
    chmod 755 /app && \
    chmod 750 /app/uploads /app/reports /app/logs /app/watch-folder /app/.cache

# Environment variables for production
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH" \
    APP_ENV=production \
    LOG_LEVEL=INFO \
    WORKERS=2 \
    THREADS=2 \
    TIMEOUT=180 \
    PYTHONHASHSEED=random

# Security: Create non-writable directories
RUN mkdir -p /tmp /var/tmp && \
    chmod 1777 /tmp /var/tmp

# Switch to non-root user
USER rca

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# Expose ports
EXPOSE 8000 8001

# Default command (can be overridden)
CMD ["gunicorn", \
    "-k", "uvicorn.workers.UvicornWorker", \
    "--bind", "0.0.0.0:8000", \
    "--workers", "2", \
    "--threads", "2", \
    "--timeout", "180", \
    "--keep-alive", "5", \
    "--max-requests", "1000", \
    "--max-requests-jitter", "50", \
    "--preload", \
    "--access-logfile", "-", \
    "--error-logfile", "-", \
    "apps.api.main:app"]

# Labels for metadata
LABEL maintainer="RCA Engine Team" \
    version="1.0.0" \
    description="RCA Engine - Unified Root Cause Analysis" \
    security.scan="true" \
    security.user="non-root" \
    security.readonly="true"