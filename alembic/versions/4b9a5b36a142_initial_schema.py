"""initial schema

Revision ID: 4b9a5b36a142
Revises: 
Create Date: 2025-10-14 11:41:18.102009

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision: str = '4b9a5b36a142'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE EXTENSION IF NOT EXISTS vector")
    op.create_table('itsm_profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('platform', sa.String(length=50), nullable=False),
    sa.Column('base_url', sa.String(length=512), nullable=False),
    sa.Column('auth_method', sa.String(length=50), nullable=False),
    sa.Column('secret_ref', sa.String(length=255), nullable=False),
    sa.Column('defaults', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("platform IN ('servicenow', 'jira')", name='valid_itsm_profile_platform'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('jobs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('job_type', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('user_id', sa.String(length=100), nullable=False),
    sa.Column('input_manifest', sa.JSON(), nullable=False),
    sa.Column('provider', sa.String(length=50), nullable=False),
    sa.Column('model', sa.String(length=100), nullable=False),
    sa.Column('model_config', sa.JSON(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('max_retries', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('result_data', sa.JSON(), nullable=True),
    sa.Column('outputs', sa.JSON(), nullable=True),
    sa.Column('ticketing', sa.JSON(), nullable=True),
    sa.Column('source', sa.JSON(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.CheckConstraint("status IN ('pending', 'running', 'completed', 'failed', 'cancelled')", name='valid_job_status'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_jobs_job_type'), 'jobs', ['job_type'], unique=False)
    op.create_index(op.f('ix_jobs_status'), 'jobs', ['status'], unique=False)
    op.create_index('ix_jobs_status_created_at', 'jobs', ['status', 'created_at'], unique=False)
    op.create_index(op.f('ix_jobs_user_id'), 'jobs', ['user_id'], unique=False)
    op.create_index('ix_jobs_user_id_status', 'jobs', ['user_id', 'status'], unique=False)
    op.create_table('ticket_integration_settings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('servicenow_enabled', sa.Boolean(), nullable=False),
    sa.Column('jira_enabled', sa.Boolean(), nullable=False),
    sa.Column('dual_mode', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index('ix_users_is_active', 'users', ['is_active'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('watcher_configs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('roots', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('include_globs', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('exclude_globs', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('max_file_size_mb', sa.Integer(), nullable=True),
    sa.Column('allowed_mime_types', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('batch_window_seconds', sa.Integer(), nullable=True),
    sa.Column('auto_create_jobs', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_watcher_configs_enabled', 'watcher_configs', ['enabled'], unique=False)
    op.create_table('conversation_turns',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('role', sa.String(length=32), nullable=False),
    sa.Column('sequence', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('token_count', sa.Integer(), nullable=True),
    sa.Column('metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_conversation_turns_job_sequence', 'conversation_turns', ['job_id', 'sequence'], unique=False)
    op.create_table('files',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('original_filename', sa.String(length=255), nullable=True),
    sa.Column('file_path', sa.String(length=1024), nullable=False),
    sa.Column('content_type', sa.String(length=100), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('checksum', sa.String(length=128), nullable=False),
    sa.Column('metadata', sa.JSON(), nullable=True),
    sa.Column('processed', sa.Boolean(), nullable=False),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_error', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('file_size > 0', name='positive_file_size'),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('checksum')
    )
    op.create_index('ix_files_checksum', 'files', ['checksum'], unique=False)
    op.create_index('ix_files_job_id_created_at', 'files', ['job_id', 'created_at'], unique=False)
    op.create_table('job_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_job_events_event_type'), 'job_events', ['event_type'], unique=False)
    op.create_index('ix_job_events_job_id_created_at', 'job_events', ['job_id', 'created_at'], unique=False)
    op.create_table('tickets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('platform', sa.String(length=50), nullable=False),
    sa.Column('ticket_id', sa.String(length=128), nullable=False),
    sa.Column('url', sa.String(length=512), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('profile_name', sa.String(length=100), nullable=True),
    sa.Column('dry_run', sa.Boolean(), nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('acknowledged_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('resolved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('time_to_acknowledge', sa.Integer(), nullable=True),
    sa.Column('time_to_resolve', sa.Integer(), nullable=True),
    sa.CheckConstraint("platform IN ('servicenow', 'jira')", name='valid_ticket_platform'),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_tickets_job_platform', 'tickets', ['job_id', 'platform'], unique=False)
    op.create_index('ix_tickets_ticket_id', 'tickets', ['ticket_id'], unique=False)
    op.create_table('watcher_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('watcher_id', sa.UUID(), nullable=True),
    sa.Column('job_id', sa.UUID(), nullable=True),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['watcher_id'], ['watcher_configs.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_watcher_events_created_at', 'watcher_events', ['created_at'], unique=False)
    op.create_index('ix_watcher_events_event_type', 'watcher_events', ['event_type'], unique=False)
    op.create_table('documents',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('file_id', sa.UUID(), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('content_type', sa.String(length=50), nullable=False),
    sa.Column('content_embedding', pgvector.sqlalchemy.Vector(dim=1536), nullable=True),
    sa.Column('metadata', sa.JSON(), nullable=True),
    sa.Column('chunk_index', sa.Integer(), nullable=True),
    sa.Column('chunk_size', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['file_id'], ['files.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_documents_content_embedding_ivfflat', 'documents', ['content_embedding'], unique=False, postgresql_using='ivfflat')
    op.create_index('ix_documents_file_id', 'documents', ['file_id'], unique=False)
    op.create_index('ix_documents_job_id', 'documents', ['job_id'], unique=False)
    op.create_table('upload_telemetry_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=True),
    sa.Column('upload_id', sa.UUID(), nullable=False),
    sa.Column('stage', sa.String(length=32), nullable=False),
    sa.Column('feature_flags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('status', sa.String(length=16), nullable=False),
    sa.Column('duration_ms', sa.Integer(), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('duration_ms >= 0', name='ck_upload_telemetry_events_duration_non_negative'),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['upload_id'], ['files.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_upload_telemetry_events_job_id'), 'upload_telemetry_events', ['job_id'], unique=False)
    op.create_index(op.f('ix_upload_telemetry_events_tenant_id'), 'upload_telemetry_events', ['tenant_id'], unique=False)
    op.create_index('ix_upload_telemetry_events_tenant_stage_status_created_at', 'upload_telemetry_events', ['tenant_id', 'stage', 'status', 'created_at'], unique=False)
    op.create_index(op.f('ix_upload_telemetry_events_upload_id'), 'upload_telemetry_events', ['upload_id'], unique=False)
    op.create_index('ix_upload_telemetry_events_upload_stage', 'upload_telemetry_events', ['upload_id', 'stage'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_upload_telemetry_events_upload_stage', table_name='upload_telemetry_events')
    op.drop_index(op.f('ix_upload_telemetry_events_upload_id'), table_name='upload_telemetry_events')
    op.drop_index('ix_upload_telemetry_events_tenant_stage_status_created_at', table_name='upload_telemetry_events')
    op.drop_index(op.f('ix_upload_telemetry_events_tenant_id'), table_name='upload_telemetry_events')
    op.drop_index(op.f('ix_upload_telemetry_events_job_id'), table_name='upload_telemetry_events')
    op.drop_table('upload_telemetry_events')
    op.drop_index('ix_documents_job_id', table_name='documents')
    op.drop_index('ix_documents_file_id', table_name='documents')
    op.drop_index('ix_documents_content_embedding_ivfflat', table_name='documents', postgresql_using='ivfflat')
    op.drop_table('documents')
    op.drop_index('ix_watcher_events_event_type', table_name='watcher_events')
    op.drop_index('ix_watcher_events_created_at', table_name='watcher_events')
    op.drop_table('watcher_events')
    op.drop_index('ix_tickets_ticket_id', table_name='tickets')
    op.drop_index('ix_tickets_job_platform', table_name='tickets')
    op.drop_table('tickets')
    op.drop_index('ix_job_events_job_id_created_at', table_name='job_events')
    op.drop_index(op.f('ix_job_events_event_type'), table_name='job_events')
    op.drop_table('job_events')
    op.drop_index('ix_files_job_id_created_at', table_name='files')
    op.drop_index('ix_files_checksum', table_name='files')
    op.drop_table('files')
    op.drop_index('ix_conversation_turns_job_sequence', table_name='conversation_turns')
    op.drop_table('conversation_turns')
    op.drop_index('ix_watcher_configs_enabled', table_name='watcher_configs')
    op.drop_table('watcher_configs')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index('ix_users_is_active', table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('ticket_integration_settings')
    op.drop_index('ix_jobs_user_id_status', table_name='jobs')
    op.drop_index(op.f('ix_jobs_user_id'), table_name='jobs')
    op.drop_index('ix_jobs_status_created_at', table_name='jobs')
    op.drop_index(op.f('ix_jobs_status'), table_name='jobs')
    op.drop_index(op.f('ix_jobs_job_type'), table_name='jobs')
    op.drop_table('jobs')
    op.drop_table('itsm_profiles')
    # ### end Alembic commands ###
